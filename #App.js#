import React, { useState, useEffect } from 'react';
import { fetchBookTextFromChatGPT, translateText } from './api';
import { loadStoredSettings } from './loadStoredSettings';
import { translateLabels } from './translateLabels';
import { MainUI } from './UI';
import * as Speech from 'expo-speech';
import AsyncStorage from '@react-native-async-storage/async-storage'; // ✅ Re-added missing import

export default function App() {
  const [uiText, setUiText] = useState({});
  const [userQuery, setUserQuery] = useState("");  
  const [sentence, setSentence] = useState("");
  const [translatedSentence, setTranslatedSentence] = useState("");
  const [detectedLanguage, setDetectedLanguage] = useState("en");
  const [showText, setShowText] = useState(false);
  const [showTranslation, setShowTranslation] = useState(false);
  const [speechRate, setSpeechRate] = useState(1.0);
  const [studyLanguage, setStudyLanguage] = useState("ru");
  const [loadingBook, setLoadingBook] = useState(false);

  useEffect(() => {
      const userLang = navigator.language.split('-')[0] || "en";
      const labels = [
	"Calliope", "Source Material", "Enter a book title or genre", "Listen", "Next Sentence",
	"Load Book", "Show Foreign Sentence", "Show Translation", "Reading Speed"
      ];
      translateLabels(setUiText);  // ✅ Now passes setUiText correctly
      loadStoredSettings(setUserQuery, setSpeechRate);
  }, []);

  // ✅ Save userQuery to storage when changed
  const updateUserQuery = async (query) => {
    setUserQuery(query);
    try {
      await AsyncStorage.setItem("userQuery", query);
      console.log(`✅ Saved userQuery to storage: "${query}"`);
    } catch (error) {
      console.error("❌ ERROR: Saving userQuery failed:", error);
    }
  };

  // ✅ Save speechRate to storage when changed
  const updateSpeechRate = async (rate) => {
    setSpeechRate(rate);
    try {
      await AsyncStorage.setItem("speechRate", rate.toString());
      console.log(`✅ Saved speechRate to storage: "${rate}"`);
    } catch (error) {
      console.error("❌ ERROR: Saving speechRate failed:", error);
    }
  };

  return (
    <MainUI
      uiText={uiText}
      userQuery={userQuery}  
      setUserQuery={updateUserQuery}  // ✅ Ensure updates persist
      loadBook={loadBook}
      sentence={translatedSentence}
      showText={showText}
      showTranslation={showTranslation}
      setShowText={setShowText}
      setShowTranslation={setShowTranslation}
      speechRate={speechRate}
      setSpeechRate={updateSpeechRate}  // ✅ Ensure updates persist
      speakSentence={() => {
        if (!translatedSentence) return;
        Speech.stop();
        Speech.speak(translatedSentence, { rate: speechRate, language: studyLanguage });
      }}
      loadingBook={loadingBook}
    />
  );
}
