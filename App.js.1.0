import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Switch } from 'react-native';
import Slider from '@react-native-community/slider';
import * as Speech from 'expo-speech';

const translateText = async (text, targetLang) => {
  if (targetLang === "en") return text;
  try {
    const response = await fetch(
      `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`
    );
    const data = await response.json();
    return data.responseData.translatedText || text;
  } catch {
    return text;
  }
};

export default function App() {
  const [uiText, setUiText] = useState({});
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showText, setShowText] = useState(false);
  const [showTranslation, setShowTranslation] = useState(false);
  const [speechRate, setSpeechRate] = useState(1.0);
  const defaultLanguage = "Russian";
  const defaultLanguageCode = "ru";
  const [translatedSentence, setTranslatedSentence] = useState("");

  useEffect(() => {
    const userLang = navigator.language.split('-')[0] || "en";
    const labels = [
      "Calliope", "Language: Russian (fixed for now)", "Play", "Stop", "Next Sentence",
      "Show Text", "Show Translation", "Reading Speed"
    ];

    const translateLabels = async () => {
      const translatedLabels = await Promise.all(labels.map(label => translateText(label, userLang)));
      setUiText({
        appName: translatedLabels[0],
        languageNotice: translatedLabels[1],
        play: translatedLabels[2],
        stop: translatedLabels[3],
        next: translatedLabels[4],
        showText: translatedLabels[5],
        showTranslation: translatedLabels[6],
        readingSpeed: translatedLabels[7]
      });
    };

    translateLabels();
  }, []);

  const sentences = {
    Russian: [
      { text: "Привет, как дела?", translation: "Hello, how are you?" },
      { text: "Меня зовут Калиопа.", translation: "My name is Calliope." },
      { text: "Давайте учить языки вместе.", translation: "Let's learn languages together." }
    ]
  };

  const currentSentences = sentences[defaultLanguage] || [];
  const currentSentence = currentSentences[currentIndex] || { text: "", translation: "" };

  useEffect(() => {
    const userLang = navigator.language.split('-')[0] || "en";
    translateText(currentSentence.translation, userLang).then(setTranslatedSentence);
  }, [currentIndex, showTranslation]);

  const speakSentence = () => {
    Speech.stop();
    Speech.getAvailableVoicesAsync().then(voices => {
        const russianVoice = voices.find(voice => voice.language.startsWith('ru'));
        Speech.speak(currentSentence.text, {
            rate: speechRate,
            language: "ru",
            voice: russianVoice ? russianVoice.identifier : undefined
        });
    });
  };

  const nextSentence = () => {
    Speech.stop();
    setCurrentIndex((prevIndex) => (prevIndex + 1) % currentSentences.length);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>{uiText.appName || "Calliope"}</Text>
      <Text style={styles.languageNotice}>{uiText.languageNotice || "Language: Russian (fixed for now)"}</Text>

      <View style={styles.sentenceContainer}>
        {showText && <Text style={styles.sentence}>{currentSentence.text}</Text>}
        {showTranslation && <Text style={styles.translation}>{translatedSentence}</Text>}
      </View>

      <View style={styles.controls}>
        <TouchableOpacity style={styles.button} onPress={speakSentence}>
          <Text style={styles.buttonText}>{uiText.play || "Play"}</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={Speech.stop}>
          <Text style={styles.buttonText}>{uiText.stop || "Stop"}</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={nextSentence}>
          <Text style={styles.buttonText}>{uiText.next || "Next Sentence"}</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.toggleContainer}>
        <View style={styles.toggleItem}>
          <Text style={styles.toggleLabel}>{uiText.showText || "Show Text"}</Text>
          <Switch value={showText} onValueChange={setShowText} />
        </View>
        <View style={styles.toggleItem}>
          <Text style={styles.toggleLabel}>{uiText.showTranslation || "Show Translation"}</Text>
          <Switch value={showTranslation} onValueChange={setShowTranslation} />
        </View>
      </View>

      <View style={styles.sliderContainer}>
        <Text style={styles.sliderLabel}>{uiText.readingSpeed || "Reading Speed"}: {speechRate.toFixed(1)}</Text>
        <Slider 
          style={{width: 150, height: 40}} 
          minimumValue={0.5}
          maximumValue={2.0}
          value={speechRate}
          onValueChange={setSpeechRate}
          minimumTrackTintColor="#1fb28a"
          maximumTrackTintColor="#d3d3d3"
          thumbTintColor="#b9e4c9"
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20
  },
  header: {
    fontSize: 36,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#333'
  },
  languageNotice: {
    fontSize: 16,
    color: '#666',
    marginBottom: 15
  },
  sentenceContainer: {
    marginVertical: 10,
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 5,
    shadowOffset: { width: 0, height: 2 },
  },
  sentence: {
    fontSize: 24,
    textAlign: 'center',
    marginBottom: 10,
    color: '#444'
  },
  translation: {
    fontSize: 18,
    textAlign: 'center',
    color: '#888'
  },
  controls: {
    flexDirection: 'row',
    marginVertical: 10
  },
  button: {
    backgroundColor: '#4a90e2',
    padding: 10,
    marginHorizontal: 5,
    borderRadius: 5
  },
  buttonText: {
    color: '#fff',
    fontSize: 16
  },
  toggleContainer: {
    flexDirection: 'row',
    marginVertical: 10,
    justifyContent: 'space-around',
    width: '100%'
  },
  sliderContainer: {
    marginVertical: 20,
    alignItems: 'center'
  },
  sliderLabel: {
    fontSize: 16,
    color: '#333'
  }
});