// Translate a batch of sentences using Google Translate
export const translateBatch = async (textArray, sourceLang, targetLang) => {
  if (!googleKey) {
    console.log('[API] No Google API key available for translation');
    return textArray; // Return original text as fallback
  }
  
  try {
    // Log key details again at point of use
    if (DEBUG_API_CALLS) {
      console.log('[API-DEBUG] About to use Google API key for request:');
      console.log(`[API-DEBUG] FULL GOOGLE KEY: "${googleKey}"`);
      console.log(`[API-DEBUG] Google Translate request details:`);
      console.log(`[API-DEBUG] - Source language: ${sourceLang}`);
      console.log(`[API-DEBUG] - Target language: ${targetLang}`);
      console.log(`[API-DEBUG] - Text array length: ${textArray.length}`);
    }
    
    const apiUrl = `https://translation.googleapis.com/language/translate/v2?key=${googleKey}`;
    
    if (DEBUG_API_CALLS) {
      console.log(`[API-DEBUG] Full Google Translate URL: "${apiUrl}"`);
    }
    
    const response = await fetch(
      apiUrl,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          q: textArray,
          source: sourceLang,
          target: targetLang,
          format: "text"
        })
      }
    );
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`[API] Google Translate API error: ${response.status} - ${errorText}`);
      
      // Additional error analysis
      if (DEBUG_API_CALLS) {
        console.log(`[API-DEBUG] Google API error details:`);
        console.log(`[API-DEBUG] - Status: ${response.status}`);
        console.log(`[API-DEBUG] - Status Text: ${response.statusText}`);
        console.log(`[API-DEBUG] - Headers:`, JSON.stringify(Object.fromEntries([...response.headers])));
        
        try {
          const errorJson = JSON.parse(errorText);
          console.log(`[API-DEBUG] - Error code: ${errorJson.error?.code}`);
          console.log(`[API-DEBUG] - Error message: ${errorJson.error?.message}`);
          console.log(`[API-DEBUG] - Error details: ${JSON.stringify(errorJson.error?.details)}`);
        } catch (e) {
          console.log(`[API-DEBUG] - Could not parse error as JSON`);
        }
      }
      
      return textArray; // Return original text as fallback
    }
    
    const data = await response.json();
    
    // Handle API errors
    if (data.error) {
      console.log(`[API] Google Translate API returned error: ${JSON.stringify(data.error)}`);
      return textArray; // Return original text as fallback
    }
    
    if (!data.data?.translations || data.data.translations.length === 0) {
      console.log('[API] No translations in Google API response');
      return textArray; // Return original text as fallback
    }
    
    return data.data.translations.map(t => t.translatedText);
  } catch (error) {
    console.log(`[API] Error in translateBatch: ${error.message}`);
    return textArray; // Return original text as fallback
  }
};