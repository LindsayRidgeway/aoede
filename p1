// apiServices.js - Deep debugging for environment variable access
import Constants from 'expo-constants';

// Import all simplification prompts statically
import getSimplificationPrompt6 from './simplifiers/simplify6';
import getSimplificationPrompt9 from './simplifiers/simplify9';
import getSimplificationPrompt12 from './simplifiers/simplify12';
import getSimplificationPrompt15 from './simplifiers/simplify15';
import getSimplificationPrompt18 from './simplifiers/simplify18';

// Enable advanced debugging
const DEBUG_KEYS = true;
const DEBUG_API_CALLS = true;

// Helper for printing key details - no need to hide anything
const logKeyDetails = (name, key) => {
  if (!key) {
    console.log(`[API-DEBUG] ${name} is null or empty`);
    return;
  }
  
  try {
    // Log key format details including the full key for debugging
    console.log(`[API-DEBUG] ${name} details:`);
    console.log(`[API-DEBUG] - Type: ${typeof key}`);
    console.log(`[API-DEBUG] - Length: ${key.length}`);
    console.log(`[API-DEBUG] - First 4 chars: "${key.substring(0, 4)}"`);
    console.log(`[API-DEBUG] - Last 4 chars: "${key.substring(key.length - 4)}"`);
    console.log(`[API-DEBUG] - FULL KEY for debugging: "${key}"`);
    
    // Check for common issues
    console.log(`[API-DEBUG] - Has whitespace at start: ${key.startsWith(' ')}`);
    console.log(`[API-DEBUG] - Has whitespace at end: ${key.endsWith(' ')}`);
    console.log(`[API-DEBUG] - Has quotes: ${key.startsWith('"') || key.startsWith("'") || key.endsWith('"') || key.endsWith("'")}`);
    console.log(`[API-DEBUG] - Contains newline: ${key.includes('\n')}`);
    console.log(`[API-DEBUG] - Contains carriage return: ${key.includes('\r')}`);
    
    // Character code analysis for the first few characters to detect non-printable chars
    const charCodes = [];
    for (let i = 0; i < Math.min(key.length, 8); i++) {
      charCodes.push(key.charCodeAt(i));
    }
    console.log(`[API-DEBUG] - First 8 char codes: ${charCodes.join(', ')}`);
  } catch (error) {
    console.log(`[API-DEBUG] Error analyzing ${name}: ${error.message}`);
  }
};