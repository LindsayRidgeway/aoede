import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, TextInput, Switch } from 'react-native';
import Slider from '@react-native-community/slider';
import * as Speech from 'expo-speech';

const fetchBookTextFromChatGPT = async (query) => {
  try {
    const requestBody = {
      model: "gpt-4",
      messages: [
        { role: "system", content: "You retrieve the first paragraph of books or genres in their original language. Respond with only the text, followed by the detected language code (e.g., 'fr', 'de', 'ru')." },
        { role: "user", content: `Provide the first paragraph of "${query}" in its original language, followed by the language code.` }
      ]
    };

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer 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`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody)
    });

    const data = await response.json();
    const fullResponse = data.choices[0].message.content.trim();

    const parts = fullResponse.split("\n");
    const text = parts.slice(0, -1).join("\n").trim();
    const detectedLanguage = parts[parts.length - 1].trim();

    return { text, language: detectedLanguage };
  } catch (error) {
    console.error("Error fetching book text:", error);
    return { text: "No book found for this query.", language: "en" };
  }
};

const translateText = async (text, sourceLang, targetLang) => {
  if (!text || sourceLang === targetLang) return text;
  try {
    const response = await fetch(
      `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${sourceLang}|${targetLang}`
    );
    const data = await response.json();
    return data.responseData.translatedText || text;
  } catch {
    return text;
  }
};

export default function App() {
  const [uiText, setUiText] = useState({});
  const [userQuery, setUserQuery] = useState("");
  const [sentence, setSentence] = useState("");
  const [translatedSentence, setTranslatedSentence] = useState("");
  const [detectedLanguage, setDetectedLanguage] = useState("en");
  const [showText, setShowText] = useState(false);
  const [showTranslation, setShowTranslation] = useState(false);
  const [speechRate, setSpeechRate] = useState(1.0);

  const defaultLanguage = "Russian";

  useEffect(() => {
    const userLang = navigator.language.split('-')[0] || "en";
    const labels = [
      "Calliope", "Enter a book title or genre", "Play", "Next Sentence",
      "Load Book", "Show Foreign Sentence", "Show Translation", "Reading Speed"
    ];

    const translateLabels = async () => {
      const translatedLabels = await Promise.all(labels.map(label => translateText(label, "en", userLang)));
      setUiText({
        appName: translatedLabels[0],
        enterBook: translatedLabels[1],
        play: translatedLabels[2],
        next: translatedLabels[3],
        loadBook: translatedLabels[4],
        showText: translatedLabels[5],
        showTranslation: translatedLabels[6],
        readingSpeed: translatedLabels[7]
      });
    };

    translateLabels();
  }, []);

  const loadBook = async () => {
    if (!userQuery) return;
    const { text, language } = await fetchBookTextFromChatGPT(userQuery);
    setSentence(text);
    setDetectedLanguage(language || "en");

    if (language !== "ru") {
      translateText(text, language || "en", "ru").then(setTranslatedSentence);
    } else {
      setTranslatedSentence(text);
    }
  };

  const speakSentence = () => {
    Speech.stop();
    Speech.getAvailableVoicesAsync().then(voices => {
      const russianVoice = voices.find(voice => voice.language.startsWith('ru'));
      Speech.speak(sentence || "", {
        rate: speechRate,
        language: "ru",
        voice: russianVoice ? russianVoice.identifier : undefined
      });
    });
  };

  const nextSentence = () => {
    setSentence("");  
    setTranslatedSentence(""); 
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>{uiText.appName || "Calliope"}</Text>

      <TextInput
        style={styles.input}
        placeholder={uiText.enterBook || "Enter a book title or genre"}
        value={userQuery}
        onChangeText={setUserQuery}
      />
      <TouchableOpacity style={styles.button} onPress={loadBook}>
        <Text style={styles.buttonText}>{uiText.loadBook || "Load Book"}</Text>
      </TouchableOpacity>

      {sentence && (
        <View style={styles.sentenceContainer}>
          {showText && <Text style={styles.sentence}>{sentence}</Text>}
          {showTranslation && <Text style={styles.translation}>{translatedSentence}</Text>}
        </View>
      )}

      <View style={styles.controls}>
        <TouchableOpacity style={styles.button} onPress={speakSentence}>
          <Text style={styles.buttonText}>{uiText.play || "Play"}</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={nextSentence}>
          <Text style={styles.buttonText}>{uiText.next || "Next Sentence"}</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.toggleContainer}>
        <View style={styles.toggleItem}>
          <Text style={styles.toggleLabel}>{uiText.showText || "Show Foreign Sentence"}</Text>
          <Switch value={showText} onValueChange={setShowText} />
        </View>
        <View style={styles.toggleItem}>
          <Text style={styles.toggleLabel}>{uiText.showTranslation || "Show Translation"}</Text>
          <Switch value={showTranslation} onValueChange={setShowTranslation} />
        </View>
      </View>

      <View style={styles.sliderContainer}>
        <Text style={styles.sliderLabel}>{uiText.readingSpeed || "Reading Speed"}: {speechRate.toFixed(1)}</Text>
        <Slider 
          style={{width: 200, height: 40}} 
          minimumValue={0.5}
          maximumValue={2.0}
          value={speechRate}
          onValueChange={setSpeechRate}
          minimumTrackTintColor="#1fb28a"
          maximumTrackTintColor="#d3d3d3"
          thumbTintColor="#b9e4c9"
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20
  },
  header: {
    fontSize: 36,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#333'
  },
  button: {
    backgroundColor: '#4a90e2',
    padding: 10,
    marginHorizontal: 5,
    borderRadius: 5,
    marginBottom: 10,
    alignItems: 'center'
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold'
  }
});